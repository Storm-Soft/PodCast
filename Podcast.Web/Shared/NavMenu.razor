@using Podcast.Domain
    <div class="top-row pl-4 navbar navbar-dark">
        <span class="navbar-title">Gestionnaire de Podcast @ecoleConfiguration.GetEcole()</span>
        <a target="_blank" href=@ecoleConfiguration.GetEcoleWebSite()><img src="@ecoleConfiguration.GetPhotoPath()" width="150"/></a>
    </div>
<div style="display:inline-block" class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Elèves
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="admin">
                <span class="oi oi-plus" aria-hidden="true"></span> Enseignants
            </NavLink>
        </li>
        @if (loginProvider.IsLoged())
        {
             <li class="nav-item px-3">
            <NavLink class="nav-link" href="disconnect">
                <span class="oi oi-plus" aria-hidden="true"></span> Déconnecter
            </NavLink>
        </li>
        }
    </ul>
</div>

@inject ILoginProvider loginProvider
@inject IEcoleConfiguration  ecoleConfiguration
@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        loginProvider.RegisterLoginChanged(async isloged => await base.InvokeAsync(StateHasChanged));
        
    }
}
