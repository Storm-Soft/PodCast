@namespace Podcast.Web.Components
@* Composant issu de https://www.technologies-ebusiness.com/solutions/blazor-composant-datagrid-pagination*@
@typeparam TItem
<style>
.pagebutton {
    margin-right: 5px;
    margin-top: 5px;
}
.currentpage {
    background-color: dodgerblue;
    color: white;
}
.grid{
    text-align:center;
}
</style>
<div class="grid">
    <table>
        <thead>
            <tr> @Columns </tr>
        </thead>
        <tbody>
            @foreach (var item in ItemList)
            {
                <tr>@RowTemplate(item)</tr>
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn pagebutton btn-info"
                @onclick=@(async () => SetPagerSize("back"))>
            «
        </button>

        <button class="btn pagebutton btn-secondary"
                @onclick=@(async () => NavigateToPage("previous"))>
            Prec.
        </button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn pagebutton @(currentPage==curPage?"currentpage":"")"
                    @onclick=@(async () => UpdateList(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn pagebutton btn-secondary"
                @onclick=@(async () => NavigateToPage("next"))>
            Suiv.
        </button>
        <button class="btn pagebutton btn-info"
                @onclick=@(async () => SetPagerSize("forward"))>
            »
        </button>

        <span class="pagebutton btn btn-link disabled">Page @curPage de @totalPages</span>
    </div>
</div>

@code{
    int totalPages;
    int curPage;
    int pagerSize;
    int startPage;
    int endPage;

    IEnumerable<TItem> ItemList { get; set; }
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public RenderFragment<TItem> RowTemplate { get; set; }
    [Parameter] public RenderFragment Columns { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 5;
        curPage = 1;
        ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
        totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        SetPagerSize("forward");
        await base.OnInitializedAsync();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
                endPage = startPage + pagerSize - 1;
            else
                endPage = totalPages;
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }


    public void UpdateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                    SetPagerSize("forward");

                curPage += 1;
            }

        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                    SetPagerSize("back");
                curPage -= 1;
            }
        }

        UpdateList(curPage);
    }
}